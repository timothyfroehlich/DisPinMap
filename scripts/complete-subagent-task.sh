#!/bin/bash
# Complete a subagent task and prepare for integration
# Usage: ./complete-subagent-task.sh <task-name> [--create-pr]

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
SUBAGENT_DIR="$PROJECT_ROOT/claude-worktrees/subagent-tasks"

complete_subagent_task() {
    local task_name=$1
    local create_pr=false

    # Parse arguments
    shift
    while [[ $# -gt 0 ]]; do
        case $1 in
            --create-pr)
                create_pr=true
                shift
                ;;
            -h|--help)
                echo "Usage: $0 <task-name> [--create-pr]"
                echo ""
                echo "Complete a subagent task and prepare for integration"
                echo ""
                echo "Options:"
                echo "  --create-pr    Automatically create a pull request"
                echo "  --help         Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Use --help for usage information"
                exit 1
                ;;
        esac
    done

    if [[ -z "$task_name" ]]; then
        echo "Usage: $0 <task-name> [--create-pr]"
        echo ""
        echo "Active subagent tasks:"
        if [[ -d "$SUBAGENT_DIR" ]]; then
            for task_dir in "$SUBAGENT_DIR"/*; do
                if [[ -d "$task_dir" && -f "$task_dir/.git" ]]; then
                    echo "  $(basename "$task_dir")"
                fi
            done
        else
            echo "  (none)"
        fi
        exit 1
    fi

    local worktree_path="$SUBAGENT_DIR/$task_name"
    local branch_name="subagent/${task_name}"

    echo "ü§ñ Completing subagent task: $task_name"
    echo "Worktree path: $worktree_path"
    echo ""

    if [[ ! -d "$worktree_path" ]]; then
        echo "‚ùå Error: Task worktree '$worktree_path' does not exist"
        exit 1
    fi

    cd "$worktree_path"

    # Verify this is a valid worktree
    if [[ ! -f ".git" ]]; then
        echo "‚ùå Error: Not a valid git worktree"
        exit 1
    fi

    local current_branch=$(git branch --show-current)
    if [[ "$current_branch" != "$branch_name" ]]; then
        echo "‚ùå Error: Expected branch '$branch_name', but found '$current_branch'"
        exit 1
    fi

    # Check for uncommitted changes
    if [[ -n $(git status --porcelain) ]]; then
        echo "‚ö†Ô∏è  Uncommitted changes detected. Please commit or stash them first."
        git status
        exit 1
    fi

    # Check if any commits were made
    local commit_count=$(git rev-list --count HEAD ^main 2>/dev/null || echo "0")
    if [[ "$commit_count" -eq "0" ]]; then
        echo "‚ö†Ô∏è  No commits found in task branch. Task appears to be incomplete."
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Task completion cancelled."
            exit 1
        fi
    else
        echo "‚úÖ Task has $commit_count commits ready for integration"
    fi

    # Update task metadata
    if [[ -f ".subagent-task.json" ]]; then
        # Update status to completed
        local temp_file=$(mktemp)
        jq '.status = "completed" | .completed_at = "'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'"' .subagent-task.json > "$temp_file"
        mv "$temp_file" .subagent-task.json

        git add .subagent-task.json
        git commit -m "meta: Mark task as completed" || true
    fi

    # Push the branch
    echo "üì§ Pushing task branch to origin..."
    git push -u origin "$branch_name"

    # Update task registry
    if [[ -f "$SUBAGENT_DIR/.task-registry" ]]; then
        # Update the registry
        local temp_file=$(mktemp)
        grep -v "^$task_name:" "$SUBAGENT_DIR/.task-registry" > "$temp_file" || true
        echo "$task_name:completed:$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> "$temp_file"
        mv "$temp_file" "$SUBAGENT_DIR/.task-registry"
    fi

    echo "‚úÖ Task branch pushed successfully"

    # Create PR if requested
    if [[ "$create_pr" == "true" ]]; then
        echo ""
        echo "üìã Creating pull request..."

        # Check if gh CLI is available
        if command -v gh &> /dev/null; then
            local pr_title="feat: $task_name (subagent)"
            local pr_body="Subagent task completion: $task_name

## Summary
- Subagent task: \`$task_name\`
- Branch: \`$branch_name\`
- Commits: $commit_count

## Changes
<!-- Subagent should describe changes here -->

ü§ñ Generated by subagent automation"

            gh pr create --title "$pr_title" --body "$pr_body" --head "$branch_name" --base main
            echo "‚úÖ Pull request created"
        else
            echo "‚ö†Ô∏è  GitHub CLI not available. Create PR manually:"
            echo "   https://github.com/timothyfroehlich/DisPinMap/compare/main...$branch_name"
        fi
    fi

    echo ""
    echo "üéâ Subagent task completed successfully!"
    echo ""
    echo "Next steps:"
    if [[ "$create_pr" != "true" ]]; then
        echo "  1. Create PR: gh pr create --head $branch_name --base main"
    fi
    echo "  2. Review and merge the PR"
    echo "  3. Clean up: $SCRIPT_DIR/cleanup-completed-worktree.sh $worktree_path"
    echo ""
    echo "Task summary:"
    echo "  - Branch: $branch_name"
    echo "  - Commits: $commit_count"
    echo "  - Status: Completed and pushed"
}

# Check if running as script (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    complete_subagent_task "$@"
fi
