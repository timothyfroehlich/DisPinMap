"""Create initial baseline from new schema

Revision ID: c89aa1e6a04d
Revises:
Create Date: 2025-07-03 19:48:35.619999

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "c89aa1e6a04d"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "channel_configs",
        sa.Column("channel_id", sa.BigInteger(), nullable=False),
        sa.Column("guild_id", sa.BigInteger(), nullable=False),
        sa.Column("poll_rate_minutes", sa.Integer(), nullable=True),
        sa.Column("notification_types", sa.String(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("last_poll_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("channel_id"),
    )
    op.create_table(
        "monitoring_targets",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("channel_id", sa.BigInteger(), nullable=False),
        sa.Column("target_type", sa.String(), nullable=False),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column("location_id", sa.Integer(), nullable=True),
        sa.Column("latitude", sa.Float(), nullable=True),
        sa.Column("longitude", sa.Float(), nullable=True),
        sa.Column("radius_miles", sa.Integer(), nullable=True),
        sa.Column("poll_rate_minutes", sa.Integer(), nullable=True),
        sa.Column("notification_types", sa.String(), nullable=True),
        sa.Column("last_checked_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.CheckConstraint(
            "\n            (target_type = 'location' AND location_id IS NOT NULL AND latitude IS NULL AND longitude IS NULL)\n            OR\n            (target_type = 'geographic' AND location_id IS NULL AND latitude IS NOT NULL AND longitude IS NOT NULL AND radius_miles IS NOT NULL)\n            ",
            name="target_data_check",
        ),
        sa.CheckConstraint(
            "target_type IN ('location', 'geographic')", name="valid_target_type"
        ),
        sa.CheckConstraint(
            "latitude IS NULL OR (latitude >= -90 AND latitude <= 90)",
            name="valid_latitude",
        ),
        sa.CheckConstraint(
            "longitude IS NULL OR (longitude >= -180 AND longitude <= 180)",
            name="valid_longitude",
        ),
        sa.CheckConstraint(
            "radius_miles IS NULL OR (radius_miles >= 1 AND radius_miles <= 100)",
            name="valid_radius",
        ),
        sa.ForeignKeyConstraint(
            ["channel_id"],
            ["channel_configs.channel_id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "channel_id", "latitude", "longitude", name="unique_geographic"
        ),
        sa.UniqueConstraint("channel_id", "location_id", name="unique_location"),
    )
    op.create_table(
        "seen_submissions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("channel_id", sa.BigInteger(), nullable=False),
        sa.Column("submission_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "seen_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["channel_id"],
            ["channel_configs.channel_id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "channel_id", "submission_id", name="unique_channel_submission"
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("seen_submissions")
    op.drop_table("monitoring_targets")
    op.drop_table("channel_configs")
    # ### end Alembic commands ###
